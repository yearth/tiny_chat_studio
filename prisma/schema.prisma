generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String             @id @default(cuid())
  name              String?
  email             String?            @unique
  emailVerified     DateTime?
  image             String?
  password          String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  accounts          Account[]
  sessions          Session[]
  providerInstances ProviderInstance[]
  chats             Chat[]
  usageLimits       UsageLimit[]
}

model Chat {
  id        String    @id @default(cuid())
  title     String    @default("New Chat")
  userId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages  Message[]
}

model Message {
  id        String   @id @default(cuid())
  content   String
  role      String
  chatId    String
  modelId   String?
  createdAt DateTime @default(now())
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  model     AIModel? @relation(fields: [modelId], references: [id])
}

model ProviderDefinition {
  id                 String             @id @default(cuid())
  type               String             @unique
  name               String
  requiresApiKey     Boolean            @default(true)
  requiresApiAddress Boolean            @default(false)
  iconUrl            String?
  description        String?
  isSystemDefined    Boolean            @default(false)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  providerInstances  ProviderInstance[]
  aiModels           AIModel[]
}

model ProviderInstance {
  id                   String                  @id @default(cuid())
  userId               String
  providerDefinitionId String
  name                 String
  enabled              Boolean                 @default(true)
  apiKey               String? // 重要：后端需要加密存储此字段
  apiAddress           String?
  customConfig         Json?
  createdAt            DateTime                @default(now())
  updatedAt            DateTime                @updatedAt
  user                 User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  providerDefinition   ProviderDefinition      @relation(fields: [providerDefinitionId], references: [id], onDelete: Restrict)
  enabledModels        ProviderInstanceModel[]
}

model ProviderInstanceModel {
  providerInstanceId String
  aiModelId          String
  providerInstance   ProviderInstance @relation(fields: [providerInstanceId], references: [id], onDelete: Cascade)
  aiModel            AIModel          @relation(fields: [aiModelId], references: [id], onDelete: Cascade)

  @@id([providerInstanceId, aiModelId])
}

model AIModel {
  id                   String                  @id @default(cuid())
  name                 String
  modelId              String
  providerDefinitionId String
  description          String?
  createdAt            DateTime                @default(now())
  updatedAt            DateTime                @updatedAt
  messages             Message[]
  providerDefinition   ProviderDefinition      @relation(fields: [providerDefinitionId], references: [id], onDelete: Cascade)
  enabledInInstances   ProviderInstanceModel[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UsageLimit {
  id        String   @id @default(cuid())
  userId    String?
  ipAddress String?
  date      DateTime @default(now()) @db.Date
  count     Int      @default(0)
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
  @@unique([ipAddress, date])
}
